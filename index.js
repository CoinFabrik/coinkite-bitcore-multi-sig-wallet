var coinkite = require('./coinkite-helper');
var bitcore = require('bitcore');
var _ = require('lodash');
var Wallet = require('./wallet').Wallet;

var keysTestnet = [
    {
        //Cosigner CK_refnum: 1EC3A1CFFE-2DAE34
        //private key in Coinkite's possesion
        pub: 'tpubD6NzVbkrYhZ4XToJPakbKtqneuM1XTD6YWpjPfZvJS8GD4RZBn2D2PZ87VSPD82W4mH7CD1fuyG3QWUkBFomHoaoYjc85iv1UADrumgqaM9'
    },
    {
        //Cosigner CK_refnum: 1B590633FF-3B60BC
        priv: 'tprv8ZgxMBicQKsPeDqD9DMaymA8uyHTDzuiQU23mZzy8NnV25jncw9dp3DTkzD5yzPMkKyZfynGro9rPFs5sGEfV3wndmpvSd7MjDXvhBzzxzp',
        pub:'tpubD6NzVbkrYhZ4Xgs12s2BPApFUzoPPL6cymcq463GYeasrZzZFKyDzXqKw8t8aXHpFd1AVV7sznkKNbFcDm66vvhukqScJkaRuKnANz6KXnh'
}];

/**
 * Returns a p2sh address as generated by Coinkite, given the HD public keys. (Derivation path "m/x")
 * @param {Array} hdPublicKeys The xpub strings.
 * @param {int} index The index to be used in the derivation path (The "x" in "m/x").
 * @param {int} requiredSignatures The number of signatures required to spend.
 * @returns {*}
 */
function getReceiveAddress(hdPublicKeys, index, requiredSignatures){
    var derivedPublicKeys = hdPublicKeys.map(function(pubString){
        return (new bitcore.HDPublicKey(pubString))
            .derive('m/' + index)
            .publicKey;
    });
    console.log(derivedPublicKeys.map(function(pub) {
        console.log('public key:' + pub);
        return bitcore.Address.fromPublicKey(pub, bitcore.Networks.livenet);
    }));
    return new bitcore.Address(derivedPublicKeys, requiredSignatures);
}
var wallet = new Wallet({
    account: 'coinfabrik',
    keys: keysTestnet,
    cosigners: 2,
    threshold: 2,
    network: bitcore.Networks.testnet
});

wallet.send('mhwvywznycjb2SFawAVXBY9QeVxhvu9qTy', 0.001).then(function() {
    console.log('Funds sent!');
});
/*

console.log(bitcore.Address.fromPublicKey(new bitcore.HDPublicKey(keys[2].priv, bitcore.Networks.livenet).publicKey, bitcore.Networks.livenet));
var hdkey = (new bitcore.HDPrivateKey(keys[2].priv, bitcore.Networks.livenet))
    .derive('m/0');
console.log(hdkey.privateKey.toAddress() + '\n' + hdkey.privateKey.toWIF());
console.log('Signature:' + require('./sign').getSignature(hdkey.privateKey, "375030f6a5271727f4c9cebc322e1cf73c979f2dfda226d57dbfbc4b556e4c04"));
var p2shAddress = getReceiveAddress(_.pluck(keys, 'pub'), 0, 2);
console.log(p2shAddress.publicKey);
*/

function callbackGenerico(error, response, body) {
    if (!error && response.statusCode == 200) {
        //var info = JSON.parse(body);
        try {
            console.log(JSON.stringify(body));
        }
        catch(e) {
            console.log(body);
        }
    } else {
        console.log(body);
        console.log(error);
    }
}
/*
coinkite.request('/v1/co-sign/9B41B8A6FE-4538BE/7EA20DAC2C-48BA4E/sign', 'PUT', {
    signatures: [['304402202c848476cdd2f62c6050e4fbcea73e25eb075dcc83c29efbaef6ae3bf5651fb30220169bf4ecff9c6a239c5efe8058ec35ed4d21981ebb00f10530aca77acd39b82b01',
        '375030f6a5271727f4c9cebc322e1cf73c979f2dfda226d57dbfbc4b556e4c04',
        '0'
    ]]
},callbackGenerico);
*/
//coinkite.request('/v1/co-sign/9B41B8A6FE-4538BE', 'GET', {},callbackGenerico);

//process.exit();
/*
    coinkite.request('/v1/new/send', 'PUT', {
        amount: '0.0001',
        account: 'coinfabrik',
        dest: '1JPzktin88qmzFJDYEDCDiWFDrBt1vuyi8'
    },callbackGenerico);*/
//coinkite.getCosignRequirements('77DE50D95C-6D60E2', "13B8AE9034-1CC9D9", callbackGenerico);
//coinkite.sign('35917D52F1-3595B3', "1EC3A1CFFE-2DAE34", [], callbackGenerico);